// <auto-generated />
using System;
using ETForum.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ETForum.Migrations
{
    [DbContext(typeof(ETForumDbContext))]
    [Migration("20250610001402_DodajDatumUnosaUOcjenaPredmeta")]
    partial class DodajDatumUnosaUOcjenaPredmeta
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ETForum.Models.Dostignuce", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("korisnikId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("tip")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("korisnikId");

                    b.ToTable("Dostignuce", (string)null);
                });

            modelBuilder.Entity("ETForum.Models.Komentar", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("datumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<string>("korisnikId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("tekst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("korisnikId");

                    b.ToTable("Komentar", (string)null);
                });

            modelBuilder.Entity("ETForum.Models.Korisnik", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<DateTime>("datumRegistracije")
                        .HasColumnType("datetime2");

                    b.Property<string>("ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("podesenProfil")
                        .HasColumnType("bit");

                    b.Property<string>("prezime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("smjer")
                        .HasColumnType("int");

                    b.Property<bool>("status")
                        .HasColumnType("bit");

                    b.Property<int?>("uloga")
                        .HasColumnType("int");

                    b.Property<string>("urlSlike")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Korisnik", (string)null);
                });

            modelBuilder.Entity("ETForum.Models.LiveChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("korisnikId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("poruka")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("vrijeme")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("korisnikId");

                    b.ToTable("LiveChat", (string)null);
                });

            modelBuilder.Entity("ETForum.Models.Notifikacija", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("korisnikId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("porukaId")
                        .HasColumnType("int");

                    b.Property<bool>("procitana")
                        .HasColumnType("bit");

                    b.Property<DateTime>("vrijemeKreiranja")
                        .HasColumnType("datetime2");

                    b.HasKey("id");

                    b.HasIndex("korisnikId");

                    b.HasIndex("porukaId");

                    b.ToTable("Notifikacija", (string)null);
                });

            modelBuilder.Entity("ETForum.Models.OcjenaPredmeta", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("DatumUnosa")
                        .HasColumnType("datetime2");

                    b.Property<string>("komentar")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("korisnikId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ocjena")
                        .HasColumnType("int");

                    b.Property<int>("predmetiId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("korisnikId");

                    b.HasIndex("predmetiId");

                    b.ToTable("OcjenaPredmeta", (string)null);
                });

            modelBuilder.Entity("ETForum.Models.Odgovor", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("brojLajkova")
                        .HasColumnType("int");

                    b.Property<DateTime>("datumOdgovora")
                        .HasColumnType("datetime2");

                    b.Property<string>("korisnikId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("pitanjeId")
                        .HasColumnType("int");

                    b.Property<string>("tekst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("korisnikId");

                    b.HasIndex("pitanjeId");

                    b.ToTable("Odgovor", (string)null);
                });

            modelBuilder.Entity("ETForum.Models.Pitanje", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<int>("brojLajkova")
                        .HasColumnType("int");

                    b.Property<DateTime>("datumPitanja")
                        .HasColumnType("datetime2");

                    b.Property<string>("korisnikId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("tekst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("korisnikId");

                    b.ToTable("Pitanje", (string)null);
                });

            modelBuilder.Entity("ETForum.Models.Poruka", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("datum")
                        .HasColumnType("datetime2");

                    b.Property<string>("korisnikId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("procitana")
                        .HasColumnType("bit");

                    b.Property<string>("tekst")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("korisnikId");

                    b.ToTable("Poruka", (string)null);
                });

            modelBuilder.Entity("ETForum.Models.Predmeti", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("asistentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("naziv")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("profesorId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("id");

                    b.HasIndex("asistentId");

                    b.HasIndex("profesorId");

                    b.ToTable("Predmeti", (string)null);
                });

            modelBuilder.Entity("ETForum.Models.Prijateljstvo", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("korisnik1Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("korisnik2Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("status")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("korisnik1Id");

                    b.HasIndex("korisnik2Id");

                    b.ToTable("Prijateljstvo", (string)null);
                });

            modelBuilder.Entity("ETForum.Models.StudySession", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("korisnikId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("kraj")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("pocetak")
                        .HasColumnType("datetime2");

                    b.Property<int?>("predmetId")
                        .HasColumnType("int");

                    b.Property<TimeSpan?>("trajanje")
                        .HasColumnType("time");

                    b.HasKey("id");

                    b.HasIndex("korisnikId");

                    b.HasIndex("predmetId");

                    b.ToTable("StudySession", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ETForum.Models.Dostignuce", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", "korisnik")
                        .WithMany("Dostignuca")
                        .HasForeignKey("korisnikId");

                    b.Navigation("korisnik");
                });

            modelBuilder.Entity("ETForum.Models.Komentar", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", "autor")
                        .WithMany()
                        .HasForeignKey("korisnikId");

                    b.Navigation("autor");
                });

            modelBuilder.Entity("ETForum.Models.LiveChat", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", "korisnik")
                        .WithMany()
                        .HasForeignKey("korisnikId");

                    b.Navigation("korisnik");
                });

            modelBuilder.Entity("ETForum.Models.Notifikacija", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", "korisnik")
                        .WithMany()
                        .HasForeignKey("korisnikId");

                    b.HasOne("ETForum.Models.Poruka", "poruka")
                        .WithMany()
                        .HasForeignKey("porukaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("korisnik");

                    b.Navigation("poruka");
                });

            modelBuilder.Entity("ETForum.Models.OcjenaPredmeta", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", "korisnik")
                        .WithMany()
                        .HasForeignKey("korisnikId");

                    b.HasOne("ETForum.Models.Predmeti", "predmet")
                        .WithMany()
                        .HasForeignKey("predmetiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("korisnik");

                    b.Navigation("predmet");
                });

            modelBuilder.Entity("ETForum.Models.Odgovor", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", "korisnik")
                        .WithMany()
                        .HasForeignKey("korisnikId");

                    b.HasOne("ETForum.Models.Pitanje", "pitanje")
                        .WithMany()
                        .HasForeignKey("pitanjeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("korisnik");

                    b.Navigation("pitanje");
                });

            modelBuilder.Entity("ETForum.Models.Pitanje", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", "autor")
                        .WithMany()
                        .HasForeignKey("korisnikId");

                    b.Navigation("autor");
                });

            modelBuilder.Entity("ETForum.Models.Poruka", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", "korisnik")
                        .WithMany()
                        .HasForeignKey("korisnikId");

                    b.Navigation("korisnik");
                });

            modelBuilder.Entity("ETForum.Models.Predmeti", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", "asistent")
                        .WithMany()
                        .HasForeignKey("asistentId");

                    b.HasOne("ETForum.Models.Korisnik", "profesor")
                        .WithMany()
                        .HasForeignKey("profesorId");

                    b.Navigation("asistent");

                    b.Navigation("profesor");
                });

            modelBuilder.Entity("ETForum.Models.Prijateljstvo", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", "korisnik1")
                        .WithMany()
                        .HasForeignKey("korisnik1Id");

                    b.HasOne("ETForum.Models.Korisnik", "korisnik2")
                        .WithMany()
                        .HasForeignKey("korisnik2Id");

                    b.Navigation("korisnik1");

                    b.Navigation("korisnik2");
                });

            modelBuilder.Entity("ETForum.Models.StudySession", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", "korisnik")
                        .WithMany()
                        .HasForeignKey("korisnikId");

                    b.HasOne("ETForum.Models.Predmeti", "predmet")
                        .WithMany()
                        .HasForeignKey("predmetId");

                    b.Navigation("korisnik");

                    b.Navigation("predmet");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ETForum.Models.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ETForum.Models.Korisnik", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ETForum.Models.Korisnik", b =>
                {
                    b.Navigation("Dostignuca");
                });
#pragma warning restore 612, 618
        }
    }
}
